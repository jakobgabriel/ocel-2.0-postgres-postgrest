version: '3'

services:
  postgrest-db:
    container_name: postgrest-db
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_ANON_ROLE: ${DB_ANON_ROLE}
      DB_SCHEMA: ${DB_SCHEMA}
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      PGRST_JWT_SECRET_IS_BASE64: ${PGRST_JWT_SECRET_IS_BASE64}
      PGRST_JWT_AUD: ${PGRST_JWT_AUD}
    volumes:
      - "./initdb:/docker-entrypoint-initdb.d"
    networks:
      - postgrest-backend
    restart: always
    command: ["postgres", "-c", "listen_addresses=*", "-c", "log_statement=all"]

  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:latest
    ports:
      - "3000:3000"
    depends_on:
      - postgrest-db
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgrest-db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMA: ${DB_SCHEMA}
      PGRST_DB_ANON_ROLE: ${DB_ANON_ROLE}
      PGRST_OPENAPI_SERVER_PROXY_URI: http://localhost:3000
    volumes:
      - "./postgrest.conf:/etc/postgrest.conf"
    # command: ["postgrest", "/etc/postgrest.conf"]
    networks:
      - postgrest-backend
    restart: always

  swagger-ui:
    container_name: swagger-ui
    image: swaggerapi/swagger-ui:latest
    ports:
      - "8080:8080"
    environment:
      - API_URL=http://localhost:3000/
    restart: always
    depends_on:
      - postgrest
    networks:
      - postgrest-backend

networks:
  postgrest-backend:
    driver: bridge