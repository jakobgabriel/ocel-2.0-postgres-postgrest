version: '3'

services:
  ################
  # postgrest-db #
  ################
  postgrest-db:
    container_name: postgrest-db
    image: postgres:13-alpine
    ports:
      - "7032:5432"
    expose:
      - "7032"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DB_AUTHN_ROLE=${DB_AUTHN_ROLE}
      - DB_AUTHN_PASSWORD=${DB_AUTHN_PASSWORD}
      - DB_SCHEMA=${DB_SCHEMA}
    volumes:
      # anything in initdb directory is created in the database
      # see "How to extend this image" section at https://hub.docker.com/r/_/postgres/
      - "./initdb:/docker-entrypoint-initdb.d"
      - "./pgdata:/var/lib/postgresql/data"
    networks:
      - postgrest-backend
    restart: always

  #############
  # postgrest #
  #############
  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:v9.0.0.20220211
    ports:
      - "3000:3000"
    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgrest-db:5432/${POSTGRES_DB}
      # The name of which database schema to expose to REST clients
      - PGRST_DB_SCHEMA=${DB_SCHEMA}
      # The database schema to expose to REST clients
      - PGRST_DB_SCHEMAS=${DB_SCHEMAS}
      # The database role to use when no client authentication is provided
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      # Enables the in-database configuration
      - PGRST_DB_CONFIG=${DB_CONFIG}
      # Name of the notification channel that PostgREST
      - PGRST_DB_CHANNEL=${DB_CHANNEL}
      # Server Proxy URI to access OPENAPI server
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://127.0.0.1:3000
      # JWT secret - TODO
      - PGRST_JWT_SECRET=Q!6HLp@B5wD24Pbq*LNd!%S4&H%ly7bt
    networks:
      - postgrest-backend
    restart: always

  #############
  # swagger #
  #############
  swagger:
    container_name: swagger
    image: swaggerapi/swagger-ui
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - API_URL=${API_URL}
    networks:
      - postgrest-backend
    restart: always
  
  ##################
  # pgadmin #
  ##################
  #pgadmin:
  #  container_name: pgadmin4_container
  #  image: dpage/pgadmin4
  #  restart: always
  #  environment:
  #    - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
  #    - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
  #  ports:
  #    - "7050:80"
  #  volumes:
  #    # pgadmin data store
  #    - "./pgadmindata:/var/lib/pgadmin"
  #  networks:
  #    - postgrest-backend

networks:
  postgrest-backend:
    driver: bridge